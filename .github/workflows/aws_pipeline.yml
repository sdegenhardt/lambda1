# TODO
# - name the build
# - create a specific package for deployment
# - how to wrap lines (for the run: dotnet build...)

name: build

on:
  push:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.x'   # i.e. The Latest .NET 8 SDK version to use
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  VERSION: '1.0.${{ github.run_number }}.0'
  FRAMEWORK: 'net8.0'
  REGION: 'us-east-2'
  ARCH: 'x86_64'

jobs:
#  scan:
#    name: gitleaks
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - uses: gitleaks/gitleaks-action@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Clean
      run: dotnet clean
      working-directory: src

    - name: Restore
      run: dotnet restore
      working-directory: src

    - name: Build
      run: dotnet build --no-restore --framework ${{ env.FRAMEWORK }} --configuration Release --self-contained false -p:FileVersion=${{ env.VERSION }} -p:VersionPrefix=${{ env.VERSION }} -p:SourceRevisionId=${{ github.sha }} -p:DebugType=None -p:DebugSymbols=False /maxcpucount:1
      working-directory: src

    - name: Unit Tests
      run: dotnet test --filter .Tests --verbosity normal --collect:"XPlat Code Coverage" --results-directory ../coverage
      working-directory: src

    - name: Integration Tests
      run: dotnet test --filter .IntegrationTests --verbosity normal --collect:"XPlat Code Coverage" --results-directory ../coverage
      working-directory: src

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/**/coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '40 60'

#    - name: Publish
#      run: dotnet publish --no-restore -c Release --framework net8.0 -r linux-x64 -p:PublishSingleFile=false -p:PublishTrimmed=false -p:DebugType=None -p:DebugSymbols=false --self-contained false -p:PublishReadyToRun=true
#      run: dotnet publish -c Release --framework net8.0 -r linux-arm64 -p:PublishSingleFile=false -p:PublishTrimmed=false -p:DebugType=None -p:DebugSymbols=false --self-contained true -p:PublishReadyToRun=true
# dotnet publish "/home/runner/work/lambda1/lambda1/src/AwsLambda2Host" --output "/home/runner/work/lambda1/lambda1/src/AwsLambda2Host/bin/Release/net8.0/publish" --configuration "Release" --framework "net8.0" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained False
#      working-directory: src

    - name: AWS CLI
      if: false
      run: dotnet tool install -g Amazon.Lambda.Tools

    - name: Package
      if: false
#      run: dotnet lambda package --region us-east-2 -c Release -f net8.0 -farch arm64 -p:PublishReadyToRun=true -o ../../publish/test.zip
      run: dotnet lambda package --region ${{ env.REGION }} -c Release -f ${{ env.FRAMEWORK }} -farch ${{ env.ARCH }} -p:PublishReadyToRun=true -o ../../publish/deploy.zip --msbuild-parameters "-p:FileVersion=${{ env.VERSION }} -p:VersionPrefix=${{ env.VERSION }} -p:SourceRevisionId=${{ github.sha }} -p:DebugType=None -p:DebugSymbols=False"
      working-directory: src/AwsLambda2Host

    - name: Deploy
      if: false
      run: dotnet lambda deploy-function -pac ../../publish/deploy.zip -fn xx13-dev-test1
      #run: dotnet lambda deploy-function xx13-dev-test1
      working-directory: src/AwsLambda2Host
